/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  wire [16-1:0] M_alu_c;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_1 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .c(M_alu_c),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [2-1:0] M_booleanTester_status;
  reg [1-1:0] M_booleanTester_clk;
  reg [1-1:0] M_booleanTester_rst;
  reg [1-1:0] M_booleanTester_start;
  testbool_2 booleanTester (
    .clk(M_booleanTester_clk),
    .rst(M_booleanTester_rst),
    .start(M_booleanTester_start),
    .status(M_booleanTester_status)
  );
  
  wire [2-1:0] M_adderTester_status;
  reg [1-1:0] M_adderTester_clk;
  reg [1-1:0] M_adderTester_rst;
  reg [1-1:0] M_adderTester_start;
  testadd_3 adderTester (
    .clk(M_adderTester_clk),
    .rst(M_adderTester_rst),
    .start(M_adderTester_start),
    .status(M_adderTester_status)
  );
  
  wire [2-1:0] M_compareTester_status;
  reg [1-1:0] M_compareTester_clk;
  reg [1-1:0] M_compareTester_rst;
  reg [1-1:0] M_compareTester_start;
  compareTester_4 compareTester (
    .clk(M_compareTester_clk),
    .rst(M_compareTester_rst),
    .start(M_compareTester_start),
    .status(M_compareTester_status)
  );
  
  wire [2-1:0] M_shifterTester_status;
  reg [1-1:0] M_shifterTester_clk;
  reg [1-1:0] M_shifterTester_rst;
  reg [1-1:0] M_shifterTester_start;
  testbitshifter_5 shifterTester (
    .clk(M_shifterTester_clk),
    .rst(M_shifterTester_rst),
    .start(M_shifterTester_start),
    .status(M_shifterTester_status)
  );
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [1-1:0] M_seg_clk;
  reg [1-1:0] M_seg_rst;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_6 seg (
    .clk(M_seg_clk),
    .rst(M_seg_rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [2-1:0] M_errorTester_status;
  reg [1-1:0] M_errorTester_clk;
  reg [1-1:0] M_errorTester_rst;
  reg [1-1:0] M_errorTester_start;
  failtests_7 errorTester (
    .clk(M_errorTester_clk),
    .rst(M_errorTester_rst),
    .start(M_errorTester_start),
    .status(M_errorTester_status)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_8 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam IDLE_state = 2'd0;
  localparam MANUAL_state = 2'd1;
  localparam AUTO_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  localparam IDLE_innerState = 3'd0;
  localparam ADDER_innerState = 3'd1;
  localparam BOOLEAN_innerState = 3'd2;
  localparam COMPARE_innerState = 3'd3;
  localparam SHIFTER_innerState = 3'd4;
  localparam ERROR_innerState = 3'd5;
  
  reg [2:0] M_innerState_d, M_innerState_q = IDLE_innerState;
  reg [15:0] M_aMemory_d, M_aMemory_q = 1'h0;
  reg [15:0] M_bMemory_d, M_bMemory_q = 1'h0;
  
  always @* begin
    M_innerState_d = M_innerState_q;
    M_state_d = M_state_q;
    M_bMemory_d = M_bMemory_q;
    M_aMemory_d = M_aMemory_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 16'hffff;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    M_seg_values = 16'hffff;
    M_seg_clk = clk;
    M_seg_rst = rst;
    M_adderTester_clk = clk;
    M_adderTester_rst = rst;
    M_adderTester_start = 1'h0;
    M_booleanTester_clk = clk;
    M_booleanTester_rst = rst;
    M_booleanTester_start = 1'h0;
    M_compareTester_clk = clk;
    M_compareTester_rst = rst;
    M_compareTester_start = 1'h0;
    M_shifterTester_clk = clk;
    M_shifterTester_rst = rst;
    M_shifterTester_start = 1'h0;
    M_errorTester_clk = clk;
    M_errorTester_rst = rst;
    M_errorTester_start = 1'h0;
    if (io_dip[16+7+0-:1] == 1'h1) begin
      M_state_d = AUTO_state;
    end else begin
      M_state_d = MANUAL_state;
    end
    
    case (M_state_q)
      MANUAL_state: begin
        if (io_dip[16+6+0-:1] == 1'h1 & io_button[1+0-:1] == 1'h1) begin
          M_aMemory_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        end
        if (io_dip[16+6+0-:1] == 1'h0 & io_button[1+0-:1] == 1'h1) begin
          M_bMemory_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        end
        a[0+15-:16] = M_aMemory_q;
        b[0+15-:16] = M_bMemory_q;
        alufn = io_dip[16+0+5-:6];
        M_alu_a = a;
        M_alu_b = b;
        M_alu_alufn = alufn;
        io_led[0+7-:8] = M_alu_c[0+7-:8];
        io_led[8+7-:8] = M_alu_c[8+7-:8];
      end
      AUTO_state: begin
        M_innerState_d = IDLE_innerState;
        if (io_button[1+0-:1] == 1'h1) begin
          M_innerState_d = ADDER_innerState;
        end
        if (io_button[0+0-:1] == 1'h1) begin
          M_innerState_d = BOOLEAN_innerState;
        end
        if (io_button[2+0-:1] == 1'h1) begin
          M_innerState_d = COMPARE_innerState;
        end
        if (io_button[3+0-:1] == 1'h1) begin
          M_innerState_d = SHIFTER_innerState;
        end
        if (io_button[4+0-:1] == 1'h1) begin
          M_innerState_d = ERROR_innerState;
        end
        
        case (M_innerState_q)
          IDLE_innerState: begin
            io_led[0+7-:8] = 1'h1;
          end
          ADDER_innerState: begin
            M_adderTester_start = 1'h1;
            if (M_adderTester_status == 1'h1) begin
              M_seg_values = 16'hab55;
            end else begin
              if (M_adderTester_status == 2'h2) begin
                M_seg_values = 16'hdb14;
              end
            end
          end
          BOOLEAN_innerState: begin
            M_booleanTester_start = 1'h1;
            if (M_booleanTester_status == 1'h1) begin
              M_seg_values = 16'hab55;
            end else begin
              if (M_booleanTester_status == 2'h2) begin
                M_seg_values = 16'hdb14;
              end
            end
          end
          COMPARE_innerState: begin
            M_compareTester_start = 1'h1;
            if (M_compareTester_status == 1'h1) begin
              M_seg_values = 16'hab55;
            end else begin
              if (M_compareTester_status == 2'h2) begin
                M_seg_values = 16'hdb14;
              end
            end
          end
          SHIFTER_innerState: begin
            M_shifterTester_start = 1'h1;
            if (M_shifterTester_status == 1'h1) begin
              M_seg_values = 16'hab55;
            end else begin
              if (M_shifterTester_status == 2'h2) begin
                M_seg_values = 16'hdb14;
              end
            end
          end
          ERROR_innerState: begin
            M_errorTester_start = 1'h1;
            if (M_errorTester_status == 1'h1) begin
              M_seg_values = 16'hab55;
            end else begin
              if (M_shifterTester_status == 2'h2) begin
                M_seg_values = 16'hdb14;
              end
            end
          end
        endcase
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_aMemory_q <= 1'h0;
      M_bMemory_q <= 1'h0;
      M_state_q <= 1'h0;
      M_innerState_q <= 1'h0;
    end else begin
      M_aMemory_q <= M_aMemory_d;
      M_bMemory_q <= M_bMemory_d;
      M_state_q <= M_state_d;
      M_innerState_q <= M_innerState_d;
    end
  end
  
endmodule
